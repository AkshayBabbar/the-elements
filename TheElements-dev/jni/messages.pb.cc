// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SaveFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParticleSpecial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParticleSpecial_reflection_ = NULL;
const ::google::protobuf::Descriptor* Particle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Particle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Particle_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Collision_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Collision_reflection_ = NULL;
const ::google::protobuf::Descriptor* Special_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Special_reflection_ = NULL;
const ::google::protobuf::Descriptor* CustomElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CustomElement_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2eproto() {
  protobuf_AddDesc_messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages.proto");
  GOOGLE_CHECK(file != NULL);
  SaveFile_descriptor_ = file->message_type(0);
  static const int SaveFile_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFile, size_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFile, size_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFile, particle_),
  };
  SaveFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveFile_descriptor_,
      SaveFile::default_instance_,
      SaveFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveFile));
  ParticleSpecial_descriptor_ = file->message_type(1);
  static const int ParticleSpecial_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticleSpecial, val_),
  };
  ParticleSpecial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParticleSpecial_descriptor_,
      ParticleSpecial::default_instance_,
      ParticleSpecial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticleSpecial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticleSpecial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParticleSpecial));
  Particle_descriptor_ = file->message_type(2);
  static const int Particle_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, x_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, y_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, heat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, special_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, element_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, element_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, element_hash_),
  };
  Particle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Particle_descriptor_,
      Particle::default_instance_,
      Particle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Particle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Particle));
  Particle_Type_descriptor_ = Particle_descriptor_->enum_type(0);
  Collision_descriptor_ = file->message_type(3);
  static const int Collision_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, type_),
  };
  Collision_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Collision_descriptor_,
      Collision::default_instance_,
      Collision_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Collision, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Collision));
  Special_descriptor_ = file->message_type(4);
  static const int Special_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Special, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Special, val_),
  };
  Special_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Special_descriptor_,
      Special::default_instance_,
      Special_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Special, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Special, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Special));
  CustomElement_descriptor_ = file->message_type(5);
  static const int CustomElement_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomElement, base_element_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomElement, allow_moving_transition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomElement, starting_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomElement, lowest_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomElement, highest_temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomElement, lower_element_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomElement, higher_element_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomElement, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomElement, green_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomElement, blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomElement, density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomElement, fallvel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomElement, inertia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomElement, collision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomElement, special_),
  };
  CustomElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CustomElement_descriptor_,
      CustomElement::default_instance_,
      CustomElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CustomElement));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveFile_descriptor_, &SaveFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParticleSpecial_descriptor_, &ParticleSpecial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Particle_descriptor_, &Particle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Collision_descriptor_, &Collision::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Special_descriptor_, &Special::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CustomElement_descriptor_, &CustomElement::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2eproto() {
  delete SaveFile::default_instance_;
  delete SaveFile_reflection_;
  delete ParticleSpecial::default_instance_;
  delete ParticleSpecial_reflection_;
  delete Particle::default_instance_;
  delete Particle_reflection_;
  delete Collision::default_instance_;
  delete Collision_reflection_;
  delete Special::default_instance_;
  delete Special_reflection_;
  delete CustomElement::default_instance_;
  delete CustomElement_reflection_;
}

void protobuf_AddDesc_messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016messages.proto\"G\n\010SaveFile\022\016\n\006size_x\030\001"
    " \001(\r\022\016\n\006size_y\030\002 \001(\r\022\033\n\010particle\030\003 \003(\0132\t"
    ".Particle\"\036\n\017ParticleSpecial\022\013\n\003val\030\001 \001("
    "\r\"\341\001\n\010Particle\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\r\n\005"
    "x_vel\030\003 \001(\021\022\r\n\005y_vel\030\004 \001(\021\022\014\n\004heat\030\005 \001(\r"
    "\022!\n\007special\030\t \003(\0132\020.ParticleSpecial\022$\n\014e"
    "lement_type\030\006 \001(\0162\016.Particle.Type\022\025\n\rele"
    "ment_index\030\007 \001(\004\022\024\n\014element_hash\030\010 \001(\004\"\035"
    "\n\004Type\022\t\n\005BASIC\020\000\022\n\n\006CUSTOM\020\001\"\031\n\tCollisi"
    "on\022\014\n\004type\030\001 \001(\004\"$\n\007Special\022\014\n\004type\030\001 \001("
    "\r\022\013\n\003val\030\002 \001(\r\"\340\002\n\rCustomElement\022\032\n\022base"
    "_element_index\030\001 \001(\r\022\037\n\027allow_moving_tra"
    "nsition\030\002 \001(\010\022\025\n\rstarting_temp\030\003 \001(\r\022\023\n\013"
    "lowest_temp\030\004 \001(\r\022\024\n\014highest_temp\030\005 \001(\r\022"
    "\033\n\023lower_element_index\030\006 \001(\r\022\034\n\024higher_e"
    "lement_index\030\007 \001(\r\022\013\n\003red\030\010 \001(\r\022\r\n\005green"
    "\030\t \001(\r\022\014\n\004blue\030\n \001(\r\022\017\n\007density\030\013 \001(\r\022\017\n"
    "\007fallvel\030\014 \001(\021\022\017\n\007inertia\030\r \001(\r\022\035\n\tcolli"
    "sion\030\016 \003(\0132\n.Collision\022\031\n\007special\030\017 \003(\0132"
    "\010.Special", 769);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
  SaveFile::default_instance_ = new SaveFile();
  ParticleSpecial::default_instance_ = new ParticleSpecial();
  Particle::default_instance_ = new Particle();
  Collision::default_instance_ = new Collision();
  Special::default_instance_ = new Special();
  CustomElement::default_instance_ = new CustomElement();
  SaveFile::default_instance_->InitAsDefaultInstance();
  ParticleSpecial::default_instance_->InitAsDefaultInstance();
  Particle::default_instance_->InitAsDefaultInstance();
  Collision::default_instance_->InitAsDefaultInstance();
  Special::default_instance_->InitAsDefaultInstance();
  CustomElement::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2eproto {
  StaticDescriptorInitializer_messages_2eproto() {
    protobuf_AddDesc_messages_2eproto();
  }
} static_descriptor_initializer_messages_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SaveFile::kSizeXFieldNumber;
const int SaveFile::kSizeYFieldNumber;
const int SaveFile::kParticleFieldNumber;
#endif  // !_MSC_VER

SaveFile::SaveFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveFile::InitAsDefaultInstance() {
}

SaveFile::SaveFile(const SaveFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveFile::SharedCtor() {
  _cached_size_ = 0;
  size_x_ = 0u;
  size_y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveFile::~SaveFile() {
  SharedDtor();
}

void SaveFile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveFile_descriptor_;
}

const SaveFile& SaveFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();  return *default_instance_;
}

SaveFile* SaveFile::default_instance_ = NULL;

SaveFile* SaveFile::New() const {
  return new SaveFile;
}

void SaveFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_x_ = 0u;
    size_y_ = 0u;
  }
  particle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 size_x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_x_)));
          set_has_size_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size_y;
        break;
      }
      
      // optional uint32 size_y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_y_)));
          set_has_size_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_particle;
        break;
      }
      
      // repeated .Particle particle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_particle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_particle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_particle;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 size_x = 1;
  if (has_size_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->size_x(), output);
  }
  
  // optional uint32 size_y = 2;
  if (has_size_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size_y(), output);
  }
  
  // repeated .Particle particle = 3;
  for (int i = 0; i < this->particle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->particle(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 size_x = 1;
  if (has_size_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->size_x(), target);
  }
  
  // optional uint32 size_y = 2;
  if (has_size_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size_y(), target);
  }
  
  // repeated .Particle particle = 3;
  for (int i = 0; i < this->particle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->particle(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveFile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 size_x = 1;
    if (has_size_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_x());
    }
    
    // optional uint32 size_y = 2;
    if (has_size_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size_y());
    }
    
  }
  // repeated .Particle particle = 3;
  total_size += 1 * this->particle_size();
  for (int i = 0; i < this->particle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->particle(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveFile::MergeFrom(const SaveFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  particle_.MergeFrom(from.particle_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size_x()) {
      set_size_x(from.size_x());
    }
    if (from.has_size_y()) {
      set_size_y(from.size_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveFile::CopyFrom(const SaveFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveFile::IsInitialized() const {
  
  return true;
}

void SaveFile::Swap(SaveFile* other) {
  if (other != this) {
    std::swap(size_x_, other->size_x_);
    std::swap(size_y_, other->size_y_);
    particle_.Swap(&other->particle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveFile_descriptor_;
  metadata.reflection = SaveFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParticleSpecial::kValFieldNumber;
#endif  // !_MSC_VER

ParticleSpecial::ParticleSpecial()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParticleSpecial::InitAsDefaultInstance() {
}

ParticleSpecial::ParticleSpecial(const ParticleSpecial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParticleSpecial::SharedCtor() {
  _cached_size_ = 0;
  val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParticleSpecial::~ParticleSpecial() {
  SharedDtor();
}

void ParticleSpecial::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParticleSpecial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParticleSpecial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParticleSpecial_descriptor_;
}

const ParticleSpecial& ParticleSpecial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();  return *default_instance_;
}

ParticleSpecial* ParticleSpecial::default_instance_ = NULL;

ParticleSpecial* ParticleSpecial::New() const {
  return new ParticleSpecial;
}

void ParticleSpecial::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParticleSpecial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 val = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParticleSpecial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 val = 1;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->val(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParticleSpecial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 val = 1;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->val(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParticleSpecial::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 val = 1;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParticleSpecial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParticleSpecial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParticleSpecial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParticleSpecial::MergeFrom(const ParticleSpecial& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParticleSpecial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParticleSpecial::CopyFrom(const ParticleSpecial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticleSpecial::IsInitialized() const {
  
  return true;
}

void ParticleSpecial::Swap(ParticleSpecial* other) {
  if (other != this) {
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParticleSpecial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParticleSpecial_descriptor_;
  metadata.reflection = ParticleSpecial_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Particle_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Particle_Type_descriptor_;
}
bool Particle_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Particle_Type Particle::BASIC;
const Particle_Type Particle::CUSTOM;
const Particle_Type Particle::Type_MIN;
const Particle_Type Particle::Type_MAX;
const int Particle::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Particle::kXFieldNumber;
const int Particle::kYFieldNumber;
const int Particle::kXVelFieldNumber;
const int Particle::kYVelFieldNumber;
const int Particle::kHeatFieldNumber;
const int Particle::kSpecialFieldNumber;
const int Particle::kElementTypeFieldNumber;
const int Particle::kElementIndexFieldNumber;
const int Particle::kElementHashFieldNumber;
#endif  // !_MSC_VER

Particle::Particle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Particle::InitAsDefaultInstance() {
}

Particle::Particle(const Particle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Particle::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  x_vel_ = 0;
  y_vel_ = 0;
  heat_ = 0u;
  element_type_ = 0;
  element_index_ = GOOGLE_ULONGLONG(0);
  element_hash_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Particle::~Particle() {
  SharedDtor();
}

void Particle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Particle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Particle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Particle_descriptor_;
}

const Particle& Particle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();  return *default_instance_;
}

Particle* Particle::default_instance_ = NULL;

Particle* Particle::New() const {
  return new Particle;
}

void Particle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    x_vel_ = 0;
    y_vel_ = 0;
    heat_ = 0u;
    element_type_ = 0;
    element_index_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    element_hash_ = GOOGLE_ULONGLONG(0);
  }
  special_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Particle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x_vel;
        break;
      }
      
      // optional sint32 x_vel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &x_vel_)));
          set_has_x_vel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y_vel;
        break;
      }
      
      // optional sint32 y_vel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &y_vel_)));
          set_has_y_vel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_heat;
        break;
      }
      
      // optional uint32 heat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heat_)));
          set_has_heat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_element_type;
        break;
      }
      
      // optional .Particle.Type element_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_element_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Particle_Type_IsValid(value)) {
            set_element_type(static_cast< ::Particle_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_element_index;
        break;
      }
      
      // optional uint64 element_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_element_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &element_index_)));
          set_has_element_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_element_hash;
        break;
      }
      
      // optional uint64 element_hash = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_element_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &element_hash_)));
          set_has_element_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_special;
        break;
      }
      
      // repeated .ParticleSpecial special = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_special:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_special()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_special;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Particle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // optional sint32 x_vel = 3;
  if (has_x_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->x_vel(), output);
  }
  
  // optional sint32 y_vel = 4;
  if (has_y_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->y_vel(), output);
  }
  
  // optional uint32 heat = 5;
  if (has_heat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heat(), output);
  }
  
  // optional .Particle.Type element_type = 6;
  if (has_element_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->element_type(), output);
  }
  
  // optional uint64 element_index = 7;
  if (has_element_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->element_index(), output);
  }
  
  // optional uint64 element_hash = 8;
  if (has_element_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->element_hash(), output);
  }
  
  // repeated .ParticleSpecial special = 9;
  for (int i = 0; i < this->special_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->special(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Particle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // optional sint32 x_vel = 3;
  if (has_x_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->x_vel(), target);
  }
  
  // optional sint32 y_vel = 4;
  if (has_y_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->y_vel(), target);
  }
  
  // optional uint32 heat = 5;
  if (has_heat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heat(), target);
  }
  
  // optional .Particle.Type element_type = 6;
  if (has_element_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->element_type(), target);
  }
  
  // optional uint64 element_index = 7;
  if (has_element_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->element_index(), target);
  }
  
  // optional uint64 element_hash = 8;
  if (has_element_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->element_hash(), target);
  }
  
  // repeated .ParticleSpecial special = 9;
  for (int i = 0; i < this->special_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->special(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Particle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional sint32 x_vel = 3;
    if (has_x_vel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->x_vel());
    }
    
    // optional sint32 y_vel = 4;
    if (has_y_vel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->y_vel());
    }
    
    // optional uint32 heat = 5;
    if (has_heat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heat());
    }
    
    // optional .Particle.Type element_type = 6;
    if (has_element_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->element_type());
    }
    
    // optional uint64 element_index = 7;
    if (has_element_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->element_index());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 element_hash = 8;
    if (has_element_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->element_hash());
    }
    
  }
  // repeated .ParticleSpecial special = 9;
  total_size += 1 * this->special_size();
  for (int i = 0; i < this->special_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->special(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Particle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Particle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Particle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Particle::MergeFrom(const Particle& from) {
  GOOGLE_CHECK_NE(&from, this);
  special_.MergeFrom(from.special_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_x_vel()) {
      set_x_vel(from.x_vel());
    }
    if (from.has_y_vel()) {
      set_y_vel(from.y_vel());
    }
    if (from.has_heat()) {
      set_heat(from.heat());
    }
    if (from.has_element_type()) {
      set_element_type(from.element_type());
    }
    if (from.has_element_index()) {
      set_element_index(from.element_index());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_element_hash()) {
      set_element_hash(from.element_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Particle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Particle::CopyFrom(const Particle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Particle::IsInitialized() const {
  
  return true;
}

void Particle::Swap(Particle* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(x_vel_, other->x_vel_);
    std::swap(y_vel_, other->y_vel_);
    std::swap(heat_, other->heat_);
    special_.Swap(&other->special_);
    std::swap(element_type_, other->element_type_);
    std::swap(element_index_, other->element_index_);
    std::swap(element_hash_, other->element_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Particle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Particle_descriptor_;
  metadata.reflection = Particle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Collision::kTypeFieldNumber;
#endif  // !_MSC_VER

Collision::Collision()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Collision::InitAsDefaultInstance() {
}

Collision::Collision(const Collision& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Collision::SharedCtor() {
  _cached_size_ = 0;
  type_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Collision::~Collision() {
  SharedDtor();
}

void Collision::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Collision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Collision::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Collision_descriptor_;
}

const Collision& Collision::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();  return *default_instance_;
}

Collision* Collision::default_instance_ = NULL;

Collision* Collision::New() const {
  return new Collision;
}

void Collision::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Collision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Collision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Collision::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Collision::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Collision::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Collision* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Collision*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Collision::MergeFrom(const Collision& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Collision::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collision::CopyFrom(const Collision& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collision::IsInitialized() const {
  
  return true;
}

void Collision::Swap(Collision* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Collision::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Collision_descriptor_;
  metadata.reflection = Collision_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Special::kTypeFieldNumber;
const int Special::kValFieldNumber;
#endif  // !_MSC_VER

Special::Special()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Special::InitAsDefaultInstance() {
}

Special::Special(const Special& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Special::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Special::~Special() {
  SharedDtor();
}

void Special::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Special::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Special::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Special_descriptor_;
}

const Special& Special::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();  return *default_instance_;
}

Special* Special::default_instance_ = NULL;

Special* Special::New() const {
  return new Special;
}

void Special::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Special::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }
      
      // optional uint32 val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Special::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional uint32 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->val(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Special::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional uint32 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->val(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Special::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Special::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Special* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Special*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Special::MergeFrom(const Special& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Special::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Special::CopyFrom(const Special& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Special::IsInitialized() const {
  
  return true;
}

void Special::Swap(Special* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Special::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Special_descriptor_;
  metadata.reflection = Special_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CustomElement::kBaseElementIndexFieldNumber;
const int CustomElement::kAllowMovingTransitionFieldNumber;
const int CustomElement::kStartingTempFieldNumber;
const int CustomElement::kLowestTempFieldNumber;
const int CustomElement::kHighestTempFieldNumber;
const int CustomElement::kLowerElementIndexFieldNumber;
const int CustomElement::kHigherElementIndexFieldNumber;
const int CustomElement::kRedFieldNumber;
const int CustomElement::kGreenFieldNumber;
const int CustomElement::kBlueFieldNumber;
const int CustomElement::kDensityFieldNumber;
const int CustomElement::kFallvelFieldNumber;
const int CustomElement::kInertiaFieldNumber;
const int CustomElement::kCollisionFieldNumber;
const int CustomElement::kSpecialFieldNumber;
#endif  // !_MSC_VER

CustomElement::CustomElement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CustomElement::InitAsDefaultInstance() {
}

CustomElement::CustomElement(const CustomElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CustomElement::SharedCtor() {
  _cached_size_ = 0;
  base_element_index_ = 0u;
  allow_moving_transition_ = false;
  starting_temp_ = 0u;
  lowest_temp_ = 0u;
  highest_temp_ = 0u;
  lower_element_index_ = 0u;
  higher_element_index_ = 0u;
  red_ = 0u;
  green_ = 0u;
  blue_ = 0u;
  density_ = 0u;
  fallvel_ = 0;
  inertia_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CustomElement::~CustomElement() {
  SharedDtor();
}

void CustomElement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CustomElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustomElement_descriptor_;
}

const CustomElement& CustomElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();  return *default_instance_;
}

CustomElement* CustomElement::default_instance_ = NULL;

CustomElement* CustomElement::New() const {
  return new CustomElement;
}

void CustomElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    base_element_index_ = 0u;
    allow_moving_transition_ = false;
    starting_temp_ = 0u;
    lowest_temp_ = 0u;
    highest_temp_ = 0u;
    lower_element_index_ = 0u;
    higher_element_index_ = 0u;
    red_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    green_ = 0u;
    blue_ = 0u;
    density_ = 0u;
    fallvel_ = 0;
    inertia_ = 0u;
  }
  collision_.Clear();
  special_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CustomElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 base_element_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_element_index_)));
          set_has_base_element_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allow_moving_transition;
        break;
      }
      
      // optional bool allow_moving_transition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_moving_transition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_moving_transition_)));
          set_has_allow_moving_transition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_starting_temp;
        break;
      }
      
      // optional uint32 starting_temp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starting_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starting_temp_)));
          set_has_starting_temp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lowest_temp;
        break;
      }
      
      // optional uint32 lowest_temp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lowest_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowest_temp_)));
          set_has_lowest_temp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_highest_temp;
        break;
      }
      
      // optional uint32 highest_temp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highest_temp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highest_temp_)));
          set_has_highest_temp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lower_element_index;
        break;
      }
      
      // optional uint32 lower_element_index = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lower_element_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lower_element_index_)));
          set_has_lower_element_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_higher_element_index;
        break;
      }
      
      // optional uint32 higher_element_index = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_higher_element_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &higher_element_index_)));
          set_has_higher_element_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_red;
        break;
      }
      
      // optional uint32 red = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_red:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &red_)));
          set_has_red();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_green;
        break;
      }
      
      // optional uint32 green = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_green:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &green_)));
          set_has_green();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_blue;
        break;
      }
      
      // optional uint32 blue = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blue_)));
          set_has_blue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_density;
        break;
      }
      
      // optional uint32 density = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &density_)));
          set_has_density();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_fallvel;
        break;
      }
      
      // optional sint32 fallvel = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fallvel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &fallvel_)));
          set_has_fallvel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_inertia;
        break;
      }
      
      // optional uint32 inertia = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inertia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inertia_)));
          set_has_inertia();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_collision;
        break;
      }
      
      // repeated .Collision collision = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collision:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collision()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_collision;
        if (input->ExpectTag(122)) goto parse_special;
        break;
      }
      
      // repeated .Special special = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_special:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_special()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_special;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CustomElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 base_element_index = 1;
  if (has_base_element_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->base_element_index(), output);
  }
  
  // optional bool allow_moving_transition = 2;
  if (has_allow_moving_transition()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allow_moving_transition(), output);
  }
  
  // optional uint32 starting_temp = 3;
  if (has_starting_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->starting_temp(), output);
  }
  
  // optional uint32 lowest_temp = 4;
  if (has_lowest_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lowest_temp(), output);
  }
  
  // optional uint32 highest_temp = 5;
  if (has_highest_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->highest_temp(), output);
  }
  
  // optional uint32 lower_element_index = 6;
  if (has_lower_element_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lower_element_index(), output);
  }
  
  // optional uint32 higher_element_index = 7;
  if (has_higher_element_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->higher_element_index(), output);
  }
  
  // optional uint32 red = 8;
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->red(), output);
  }
  
  // optional uint32 green = 9;
  if (has_green()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->green(), output);
  }
  
  // optional uint32 blue = 10;
  if (has_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->blue(), output);
  }
  
  // optional uint32 density = 11;
  if (has_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->density(), output);
  }
  
  // optional sint32 fallvel = 12;
  if (has_fallvel()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(12, this->fallvel(), output);
  }
  
  // optional uint32 inertia = 13;
  if (has_inertia()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->inertia(), output);
  }
  
  // repeated .Collision collision = 14;
  for (int i = 0; i < this->collision_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->collision(i), output);
  }
  
  // repeated .Special special = 15;
  for (int i = 0; i < this->special_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->special(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CustomElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 base_element_index = 1;
  if (has_base_element_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->base_element_index(), target);
  }
  
  // optional bool allow_moving_transition = 2;
  if (has_allow_moving_transition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allow_moving_transition(), target);
  }
  
  // optional uint32 starting_temp = 3;
  if (has_starting_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->starting_temp(), target);
  }
  
  // optional uint32 lowest_temp = 4;
  if (has_lowest_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lowest_temp(), target);
  }
  
  // optional uint32 highest_temp = 5;
  if (has_highest_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->highest_temp(), target);
  }
  
  // optional uint32 lower_element_index = 6;
  if (has_lower_element_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lower_element_index(), target);
  }
  
  // optional uint32 higher_element_index = 7;
  if (has_higher_element_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->higher_element_index(), target);
  }
  
  // optional uint32 red = 8;
  if (has_red()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->red(), target);
  }
  
  // optional uint32 green = 9;
  if (has_green()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->green(), target);
  }
  
  // optional uint32 blue = 10;
  if (has_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->blue(), target);
  }
  
  // optional uint32 density = 11;
  if (has_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->density(), target);
  }
  
  // optional sint32 fallvel = 12;
  if (has_fallvel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(12, this->fallvel(), target);
  }
  
  // optional uint32 inertia = 13;
  if (has_inertia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->inertia(), target);
  }
  
  // repeated .Collision collision = 14;
  for (int i = 0; i < this->collision_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->collision(i), target);
  }
  
  // repeated .Special special = 15;
  for (int i = 0; i < this->special_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->special(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CustomElement::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 base_element_index = 1;
    if (has_base_element_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_element_index());
    }
    
    // optional bool allow_moving_transition = 2;
    if (has_allow_moving_transition()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 starting_temp = 3;
    if (has_starting_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starting_temp());
    }
    
    // optional uint32 lowest_temp = 4;
    if (has_lowest_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lowest_temp());
    }
    
    // optional uint32 highest_temp = 5;
    if (has_highest_temp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highest_temp());
    }
    
    // optional uint32 lower_element_index = 6;
    if (has_lower_element_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lower_element_index());
    }
    
    // optional uint32 higher_element_index = 7;
    if (has_higher_element_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->higher_element_index());
    }
    
    // optional uint32 red = 8;
    if (has_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->red());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 green = 9;
    if (has_green()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->green());
    }
    
    // optional uint32 blue = 10;
    if (has_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blue());
    }
    
    // optional uint32 density = 11;
    if (has_density()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->density());
    }
    
    // optional sint32 fallvel = 12;
    if (has_fallvel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->fallvel());
    }
    
    // optional uint32 inertia = 13;
    if (has_inertia()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inertia());
    }
    
  }
  // repeated .Collision collision = 14;
  total_size += 1 * this->collision_size();
  for (int i = 0; i < this->collision_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->collision(i));
  }
  
  // repeated .Special special = 15;
  total_size += 1 * this->special_size();
  for (int i = 0; i < this->special_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->special(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CustomElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CustomElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CustomElement::MergeFrom(const CustomElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  collision_.MergeFrom(from.collision_);
  special_.MergeFrom(from.special_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_element_index()) {
      set_base_element_index(from.base_element_index());
    }
    if (from.has_allow_moving_transition()) {
      set_allow_moving_transition(from.allow_moving_transition());
    }
    if (from.has_starting_temp()) {
      set_starting_temp(from.starting_temp());
    }
    if (from.has_lowest_temp()) {
      set_lowest_temp(from.lowest_temp());
    }
    if (from.has_highest_temp()) {
      set_highest_temp(from.highest_temp());
    }
    if (from.has_lower_element_index()) {
      set_lower_element_index(from.lower_element_index());
    }
    if (from.has_higher_element_index()) {
      set_higher_element_index(from.higher_element_index());
    }
    if (from.has_red()) {
      set_red(from.red());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_green()) {
      set_green(from.green());
    }
    if (from.has_blue()) {
      set_blue(from.blue());
    }
    if (from.has_density()) {
      set_density(from.density());
    }
    if (from.has_fallvel()) {
      set_fallvel(from.fallvel());
    }
    if (from.has_inertia()) {
      set_inertia(from.inertia());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CustomElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomElement::CopyFrom(const CustomElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomElement::IsInitialized() const {
  
  return true;
}

void CustomElement::Swap(CustomElement* other) {
  if (other != this) {
    std::swap(base_element_index_, other->base_element_index_);
    std::swap(allow_moving_transition_, other->allow_moving_transition_);
    std::swap(starting_temp_, other->starting_temp_);
    std::swap(lowest_temp_, other->lowest_temp_);
    std::swap(highest_temp_, other->highest_temp_);
    std::swap(lower_element_index_, other->lower_element_index_);
    std::swap(higher_element_index_, other->higher_element_index_);
    std::swap(red_, other->red_);
    std::swap(green_, other->green_);
    std::swap(blue_, other->blue_);
    std::swap(density_, other->density_);
    std::swap(fallvel_, other->fallvel_);
    std::swap(inertia_, other->inertia_);
    collision_.Swap(&other->collision_);
    special_.Swap(&other->special_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CustomElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CustomElement_descriptor_;
  metadata.reflection = CustomElement_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
