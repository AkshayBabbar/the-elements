// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2eproto();
void protobuf_AssignDesc_messages_2eproto();
void protobuf_ShutdownFile_messages_2eproto();

class SaveFile;
class ParticleSpecial;
class Particle;
class Collision;
class Special;
class CustomElement;

enum Particle_Type {
  Particle_Type_BASIC = 0,
  Particle_Type_CUSTOM = 1
};
bool Particle_Type_IsValid(int value);
const Particle_Type Particle_Type_Type_MIN = Particle_Type_BASIC;
const Particle_Type Particle_Type_Type_MAX = Particle_Type_CUSTOM;
const int Particle_Type_Type_ARRAYSIZE = Particle_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Particle_Type_descriptor();
inline const ::std::string& Particle_Type_Name(Particle_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Particle_Type_descriptor(), value);
}
inline bool Particle_Type_Parse(
    const ::std::string& name, Particle_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Particle_Type>(
    Particle_Type_descriptor(), name, value);
}
// ===================================================================

class SaveFile : public ::google::protobuf::Message {
 public:
  SaveFile();
  virtual ~SaveFile();
  
  SaveFile(const SaveFile& from);
  
  inline SaveFile& operator=(const SaveFile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveFile& default_instance();
  
  void Swap(SaveFile* other);
  
  // implements Message ----------------------------------------------
  
  SaveFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveFile& from);
  void MergeFrom(const SaveFile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 size_x = 1;
  inline bool has_size_x() const;
  inline void clear_size_x();
  static const int kSizeXFieldNumber = 1;
  inline ::google::protobuf::uint32 size_x() const;
  inline void set_size_x(::google::protobuf::uint32 value);
  
  // optional uint32 size_y = 2;
  inline bool has_size_y() const;
  inline void clear_size_y();
  static const int kSizeYFieldNumber = 2;
  inline ::google::protobuf::uint32 size_y() const;
  inline void set_size_y(::google::protobuf::uint32 value);
  
  // repeated .Particle particle = 3;
  inline int particle_size() const;
  inline void clear_particle();
  static const int kParticleFieldNumber = 3;
  inline const ::Particle& particle(int index) const;
  inline ::Particle* mutable_particle(int index);
  inline ::Particle* add_particle();
  inline const ::google::protobuf::RepeatedPtrField< ::Particle >&
      particle() const;
  inline ::google::protobuf::RepeatedPtrField< ::Particle >*
      mutable_particle();
  
  // @@protoc_insertion_point(class_scope:SaveFile)
 private:
  inline void set_has_size_x();
  inline void clear_has_size_x();
  inline void set_has_size_y();
  inline void clear_has_size_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 size_x_;
  ::google::protobuf::uint32 size_y_;
  ::google::protobuf::RepeatedPtrField< ::Particle > particle_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();
  
  void InitAsDefaultInstance();
  static SaveFile* default_instance_;
};
// -------------------------------------------------------------------

class ParticleSpecial : public ::google::protobuf::Message {
 public:
  ParticleSpecial();
  virtual ~ParticleSpecial();
  
  ParticleSpecial(const ParticleSpecial& from);
  
  inline ParticleSpecial& operator=(const ParticleSpecial& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ParticleSpecial& default_instance();
  
  void Swap(ParticleSpecial* other);
  
  // implements Message ----------------------------------------------
  
  ParticleSpecial* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParticleSpecial& from);
  void MergeFrom(const ParticleSpecial& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 val = 1;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 1;
  inline ::google::protobuf::uint32 val() const;
  inline void set_val(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ParticleSpecial)
 private:
  inline void set_has_val();
  inline void clear_has_val();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 val_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();
  
  void InitAsDefaultInstance();
  static ParticleSpecial* default_instance_;
};
// -------------------------------------------------------------------

class Particle : public ::google::protobuf::Message {
 public:
  Particle();
  virtual ~Particle();
  
  Particle(const Particle& from);
  
  inline Particle& operator=(const Particle& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Particle& default_instance();
  
  void Swap(Particle* other);
  
  // implements Message ----------------------------------------------
  
  Particle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Particle& from);
  void MergeFrom(const Particle& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Particle_Type Type;
  static const Type BASIC = Particle_Type_BASIC;
  static const Type CUSTOM = Particle_Type_CUSTOM;
  static inline bool Type_IsValid(int value) {
    return Particle_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Particle_Type_Type_MIN;
  static const Type Type_MAX =
    Particle_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Particle_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Particle_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Particle_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Particle_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // optional sint32 x_vel = 3;
  inline bool has_x_vel() const;
  inline void clear_x_vel();
  static const int kXVelFieldNumber = 3;
  inline ::google::protobuf::int32 x_vel() const;
  inline void set_x_vel(::google::protobuf::int32 value);
  
  // optional sint32 y_vel = 4;
  inline bool has_y_vel() const;
  inline void clear_y_vel();
  static const int kYVelFieldNumber = 4;
  inline ::google::protobuf::int32 y_vel() const;
  inline void set_y_vel(::google::protobuf::int32 value);
  
  // optional uint32 heat = 5;
  inline bool has_heat() const;
  inline void clear_heat();
  static const int kHeatFieldNumber = 5;
  inline ::google::protobuf::uint32 heat() const;
  inline void set_heat(::google::protobuf::uint32 value);
  
  // repeated .ParticleSpecial special = 9;
  inline int special_size() const;
  inline void clear_special();
  static const int kSpecialFieldNumber = 9;
  inline const ::ParticleSpecial& special(int index) const;
  inline ::ParticleSpecial* mutable_special(int index);
  inline ::ParticleSpecial* add_special();
  inline const ::google::protobuf::RepeatedPtrField< ::ParticleSpecial >&
      special() const;
  inline ::google::protobuf::RepeatedPtrField< ::ParticleSpecial >*
      mutable_special();
  
  // optional .Particle.Type element_type = 6;
  inline bool has_element_type() const;
  inline void clear_element_type();
  static const int kElementTypeFieldNumber = 6;
  inline ::Particle_Type element_type() const;
  inline void set_element_type(::Particle_Type value);
  
  // optional uint64 element_index = 7;
  inline bool has_element_index() const;
  inline void clear_element_index();
  static const int kElementIndexFieldNumber = 7;
  inline ::google::protobuf::uint64 element_index() const;
  inline void set_element_index(::google::protobuf::uint64 value);
  
  // optional uint64 element_hash = 8;
  inline bool has_element_hash() const;
  inline void clear_element_hash();
  static const int kElementHashFieldNumber = 8;
  inline ::google::protobuf::uint64 element_hash() const;
  inline void set_element_hash(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:Particle)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_x_vel();
  inline void clear_has_x_vel();
  inline void set_has_y_vel();
  inline void clear_has_y_vel();
  inline void set_has_heat();
  inline void clear_has_heat();
  inline void set_has_element_type();
  inline void clear_has_element_type();
  inline void set_has_element_index();
  inline void clear_has_element_index();
  inline void set_has_element_hash();
  inline void clear_has_element_hash();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  ::google::protobuf::int32 x_vel_;
  ::google::protobuf::int32 y_vel_;
  ::google::protobuf::RepeatedPtrField< ::ParticleSpecial > special_;
  ::google::protobuf::uint32 heat_;
  int element_type_;
  ::google::protobuf::uint64 element_index_;
  ::google::protobuf::uint64 element_hash_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();
  
  void InitAsDefaultInstance();
  static Particle* default_instance_;
};
// -------------------------------------------------------------------

class Collision : public ::google::protobuf::Message {
 public:
  Collision();
  virtual ~Collision();
  
  Collision(const Collision& from);
  
  inline Collision& operator=(const Collision& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Collision& default_instance();
  
  void Swap(Collision* other);
  
  // implements Message ----------------------------------------------
  
  Collision* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Collision& from);
  void MergeFrom(const Collision& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint64 type() const;
  inline void set_type(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:Collision)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();
  
  void InitAsDefaultInstance();
  static Collision* default_instance_;
};
// -------------------------------------------------------------------

class Special : public ::google::protobuf::Message {
 public:
  Special();
  virtual ~Special();
  
  Special(const Special& from);
  
  inline Special& operator=(const Special& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Special& default_instance();
  
  void Swap(Special* other);
  
  // implements Message ----------------------------------------------
  
  Special* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Special& from);
  void MergeFrom(const Special& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional uint32 val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline ::google::protobuf::uint32 val() const;
  inline void set_val(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Special)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_val();
  inline void clear_has_val();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 val_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();
  
  void InitAsDefaultInstance();
  static Special* default_instance_;
};
// -------------------------------------------------------------------

class CustomElement : public ::google::protobuf::Message {
 public:
  CustomElement();
  virtual ~CustomElement();
  
  CustomElement(const CustomElement& from);
  
  inline CustomElement& operator=(const CustomElement& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CustomElement& default_instance();
  
  void Swap(CustomElement* other);
  
  // implements Message ----------------------------------------------
  
  CustomElement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CustomElement& from);
  void MergeFrom(const CustomElement& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 base_element_index = 1;
  inline bool has_base_element_index() const;
  inline void clear_base_element_index();
  static const int kBaseElementIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 base_element_index() const;
  inline void set_base_element_index(::google::protobuf::uint32 value);
  
  // optional bool allow_moving_transition = 2;
  inline bool has_allow_moving_transition() const;
  inline void clear_allow_moving_transition();
  static const int kAllowMovingTransitionFieldNumber = 2;
  inline bool allow_moving_transition() const;
  inline void set_allow_moving_transition(bool value);
  
  // optional uint32 starting_temp = 3;
  inline bool has_starting_temp() const;
  inline void clear_starting_temp();
  static const int kStartingTempFieldNumber = 3;
  inline ::google::protobuf::uint32 starting_temp() const;
  inline void set_starting_temp(::google::protobuf::uint32 value);
  
  // optional uint32 lowest_temp = 4;
  inline bool has_lowest_temp() const;
  inline void clear_lowest_temp();
  static const int kLowestTempFieldNumber = 4;
  inline ::google::protobuf::uint32 lowest_temp() const;
  inline void set_lowest_temp(::google::protobuf::uint32 value);
  
  // optional uint32 highest_temp = 5;
  inline bool has_highest_temp() const;
  inline void clear_highest_temp();
  static const int kHighestTempFieldNumber = 5;
  inline ::google::protobuf::uint32 highest_temp() const;
  inline void set_highest_temp(::google::protobuf::uint32 value);
  
  // optional uint32 lower_element_index = 6;
  inline bool has_lower_element_index() const;
  inline void clear_lower_element_index();
  static const int kLowerElementIndexFieldNumber = 6;
  inline ::google::protobuf::uint32 lower_element_index() const;
  inline void set_lower_element_index(::google::protobuf::uint32 value);
  
  // optional uint32 higher_element_index = 7;
  inline bool has_higher_element_index() const;
  inline void clear_higher_element_index();
  static const int kHigherElementIndexFieldNumber = 7;
  inline ::google::protobuf::uint32 higher_element_index() const;
  inline void set_higher_element_index(::google::protobuf::uint32 value);
  
  // optional uint32 red = 8;
  inline bool has_red() const;
  inline void clear_red();
  static const int kRedFieldNumber = 8;
  inline ::google::protobuf::uint32 red() const;
  inline void set_red(::google::protobuf::uint32 value);
  
  // optional uint32 green = 9;
  inline bool has_green() const;
  inline void clear_green();
  static const int kGreenFieldNumber = 9;
  inline ::google::protobuf::uint32 green() const;
  inline void set_green(::google::protobuf::uint32 value);
  
  // optional uint32 blue = 10;
  inline bool has_blue() const;
  inline void clear_blue();
  static const int kBlueFieldNumber = 10;
  inline ::google::protobuf::uint32 blue() const;
  inline void set_blue(::google::protobuf::uint32 value);
  
  // optional uint32 density = 11;
  inline bool has_density() const;
  inline void clear_density();
  static const int kDensityFieldNumber = 11;
  inline ::google::protobuf::uint32 density() const;
  inline void set_density(::google::protobuf::uint32 value);
  
  // optional sint32 fallvel = 12;
  inline bool has_fallvel() const;
  inline void clear_fallvel();
  static const int kFallvelFieldNumber = 12;
  inline ::google::protobuf::int32 fallvel() const;
  inline void set_fallvel(::google::protobuf::int32 value);
  
  // optional uint32 inertia = 13;
  inline bool has_inertia() const;
  inline void clear_inertia();
  static const int kInertiaFieldNumber = 13;
  inline ::google::protobuf::uint32 inertia() const;
  inline void set_inertia(::google::protobuf::uint32 value);
  
  // repeated .Collision collision = 14;
  inline int collision_size() const;
  inline void clear_collision();
  static const int kCollisionFieldNumber = 14;
  inline const ::Collision& collision(int index) const;
  inline ::Collision* mutable_collision(int index);
  inline ::Collision* add_collision();
  inline const ::google::protobuf::RepeatedPtrField< ::Collision >&
      collision() const;
  inline ::google::protobuf::RepeatedPtrField< ::Collision >*
      mutable_collision();
  
  // repeated .Special special = 15;
  inline int special_size() const;
  inline void clear_special();
  static const int kSpecialFieldNumber = 15;
  inline const ::Special& special(int index) const;
  inline ::Special* mutable_special(int index);
  inline ::Special* add_special();
  inline const ::google::protobuf::RepeatedPtrField< ::Special >&
      special() const;
  inline ::google::protobuf::RepeatedPtrField< ::Special >*
      mutable_special();
  
  // @@protoc_insertion_point(class_scope:CustomElement)
 private:
  inline void set_has_base_element_index();
  inline void clear_has_base_element_index();
  inline void set_has_allow_moving_transition();
  inline void clear_has_allow_moving_transition();
  inline void set_has_starting_temp();
  inline void clear_has_starting_temp();
  inline void set_has_lowest_temp();
  inline void clear_has_lowest_temp();
  inline void set_has_highest_temp();
  inline void clear_has_highest_temp();
  inline void set_has_lower_element_index();
  inline void clear_has_lower_element_index();
  inline void set_has_higher_element_index();
  inline void clear_has_higher_element_index();
  inline void set_has_red();
  inline void clear_has_red();
  inline void set_has_green();
  inline void clear_has_green();
  inline void set_has_blue();
  inline void clear_has_blue();
  inline void set_has_density();
  inline void clear_has_density();
  inline void set_has_fallvel();
  inline void clear_has_fallvel();
  inline void set_has_inertia();
  inline void clear_has_inertia();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 base_element_index_;
  bool allow_moving_transition_;
  ::google::protobuf::uint32 starting_temp_;
  ::google::protobuf::uint32 lowest_temp_;
  ::google::protobuf::uint32 highest_temp_;
  ::google::protobuf::uint32 lower_element_index_;
  ::google::protobuf::uint32 higher_element_index_;
  ::google::protobuf::uint32 red_;
  ::google::protobuf::uint32 green_;
  ::google::protobuf::uint32 blue_;
  ::google::protobuf::uint32 density_;
  ::google::protobuf::int32 fallvel_;
  ::google::protobuf::RepeatedPtrField< ::Collision > collision_;
  ::google::protobuf::RepeatedPtrField< ::Special > special_;
  ::google::protobuf::uint32 inertia_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();
  
  void InitAsDefaultInstance();
  static CustomElement* default_instance_;
};
// ===================================================================


// ===================================================================

// SaveFile

// optional uint32 size_x = 1;
inline bool SaveFile::has_size_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveFile::set_has_size_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveFile::clear_has_size_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveFile::clear_size_x() {
  size_x_ = 0u;
  clear_has_size_x();
}
inline ::google::protobuf::uint32 SaveFile::size_x() const {
  return size_x_;
}
inline void SaveFile::set_size_x(::google::protobuf::uint32 value) {
  set_has_size_x();
  size_x_ = value;
}

// optional uint32 size_y = 2;
inline bool SaveFile::has_size_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SaveFile::set_has_size_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SaveFile::clear_has_size_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SaveFile::clear_size_y() {
  size_y_ = 0u;
  clear_has_size_y();
}
inline ::google::protobuf::uint32 SaveFile::size_y() const {
  return size_y_;
}
inline void SaveFile::set_size_y(::google::protobuf::uint32 value) {
  set_has_size_y();
  size_y_ = value;
}

// repeated .Particle particle = 3;
inline int SaveFile::particle_size() const {
  return particle_.size();
}
inline void SaveFile::clear_particle() {
  particle_.Clear();
}
inline const ::Particle& SaveFile::particle(int index) const {
  return particle_.Get(index);
}
inline ::Particle* SaveFile::mutable_particle(int index) {
  return particle_.Mutable(index);
}
inline ::Particle* SaveFile::add_particle() {
  return particle_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Particle >&
SaveFile::particle() const {
  return particle_;
}
inline ::google::protobuf::RepeatedPtrField< ::Particle >*
SaveFile::mutable_particle() {
  return &particle_;
}

// -------------------------------------------------------------------

// ParticleSpecial

// optional uint32 val = 1;
inline bool ParticleSpecial::has_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParticleSpecial::set_has_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParticleSpecial::clear_has_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParticleSpecial::clear_val() {
  val_ = 0u;
  clear_has_val();
}
inline ::google::protobuf::uint32 ParticleSpecial::val() const {
  return val_;
}
inline void ParticleSpecial::set_val(::google::protobuf::uint32 value) {
  set_has_val();
  val_ = value;
}

// -------------------------------------------------------------------

// Particle

// optional float x = 1;
inline bool Particle::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Particle::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Particle::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Particle::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Particle::x() const {
  return x_;
}
inline void Particle::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool Particle::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Particle::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Particle::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Particle::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Particle::y() const {
  return y_;
}
inline void Particle::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional sint32 x_vel = 3;
inline bool Particle::has_x_vel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Particle::set_has_x_vel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Particle::clear_has_x_vel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Particle::clear_x_vel() {
  x_vel_ = 0;
  clear_has_x_vel();
}
inline ::google::protobuf::int32 Particle::x_vel() const {
  return x_vel_;
}
inline void Particle::set_x_vel(::google::protobuf::int32 value) {
  set_has_x_vel();
  x_vel_ = value;
}

// optional sint32 y_vel = 4;
inline bool Particle::has_y_vel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Particle::set_has_y_vel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Particle::clear_has_y_vel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Particle::clear_y_vel() {
  y_vel_ = 0;
  clear_has_y_vel();
}
inline ::google::protobuf::int32 Particle::y_vel() const {
  return y_vel_;
}
inline void Particle::set_y_vel(::google::protobuf::int32 value) {
  set_has_y_vel();
  y_vel_ = value;
}

// optional uint32 heat = 5;
inline bool Particle::has_heat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Particle::set_has_heat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Particle::clear_has_heat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Particle::clear_heat() {
  heat_ = 0u;
  clear_has_heat();
}
inline ::google::protobuf::uint32 Particle::heat() const {
  return heat_;
}
inline void Particle::set_heat(::google::protobuf::uint32 value) {
  set_has_heat();
  heat_ = value;
}

// repeated .ParticleSpecial special = 9;
inline int Particle::special_size() const {
  return special_.size();
}
inline void Particle::clear_special() {
  special_.Clear();
}
inline const ::ParticleSpecial& Particle::special(int index) const {
  return special_.Get(index);
}
inline ::ParticleSpecial* Particle::mutable_special(int index) {
  return special_.Mutable(index);
}
inline ::ParticleSpecial* Particle::add_special() {
  return special_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ParticleSpecial >&
Particle::special() const {
  return special_;
}
inline ::google::protobuf::RepeatedPtrField< ::ParticleSpecial >*
Particle::mutable_special() {
  return &special_;
}

// optional .Particle.Type element_type = 6;
inline bool Particle::has_element_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Particle::set_has_element_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Particle::clear_has_element_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Particle::clear_element_type() {
  element_type_ = 0;
  clear_has_element_type();
}
inline ::Particle_Type Particle::element_type() const {
  return static_cast< ::Particle_Type >(element_type_);
}
inline void Particle::set_element_type(::Particle_Type value) {
  GOOGLE_DCHECK(::Particle_Type_IsValid(value));
  set_has_element_type();
  element_type_ = value;
}

// optional uint64 element_index = 7;
inline bool Particle::has_element_index() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Particle::set_has_element_index() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Particle::clear_has_element_index() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Particle::clear_element_index() {
  element_index_ = GOOGLE_ULONGLONG(0);
  clear_has_element_index();
}
inline ::google::protobuf::uint64 Particle::element_index() const {
  return element_index_;
}
inline void Particle::set_element_index(::google::protobuf::uint64 value) {
  set_has_element_index();
  element_index_ = value;
}

// optional uint64 element_hash = 8;
inline bool Particle::has_element_hash() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Particle::set_has_element_hash() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Particle::clear_has_element_hash() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Particle::clear_element_hash() {
  element_hash_ = GOOGLE_ULONGLONG(0);
  clear_has_element_hash();
}
inline ::google::protobuf::uint64 Particle::element_hash() const {
  return element_hash_;
}
inline void Particle::set_element_hash(::google::protobuf::uint64 value) {
  set_has_element_hash();
  element_hash_ = value;
}

// -------------------------------------------------------------------

// Collision

// optional uint64 type = 1;
inline bool Collision::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Collision::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Collision::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Collision::clear_type() {
  type_ = GOOGLE_ULONGLONG(0);
  clear_has_type();
}
inline ::google::protobuf::uint64 Collision::type() const {
  return type_;
}
inline void Collision::set_type(::google::protobuf::uint64 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Special

// optional uint32 type = 1;
inline bool Special::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Special::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Special::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Special::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Special::type() const {
  return type_;
}
inline void Special::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 val = 2;
inline bool Special::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Special::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Special::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Special::clear_val() {
  val_ = 0u;
  clear_has_val();
}
inline ::google::protobuf::uint32 Special::val() const {
  return val_;
}
inline void Special::set_val(::google::protobuf::uint32 value) {
  set_has_val();
  val_ = value;
}

// -------------------------------------------------------------------

// CustomElement

// optional uint32 base_element_index = 1;
inline bool CustomElement::has_base_element_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CustomElement::set_has_base_element_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CustomElement::clear_has_base_element_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CustomElement::clear_base_element_index() {
  base_element_index_ = 0u;
  clear_has_base_element_index();
}
inline ::google::protobuf::uint32 CustomElement::base_element_index() const {
  return base_element_index_;
}
inline void CustomElement::set_base_element_index(::google::protobuf::uint32 value) {
  set_has_base_element_index();
  base_element_index_ = value;
}

// optional bool allow_moving_transition = 2;
inline bool CustomElement::has_allow_moving_transition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CustomElement::set_has_allow_moving_transition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CustomElement::clear_has_allow_moving_transition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CustomElement::clear_allow_moving_transition() {
  allow_moving_transition_ = false;
  clear_has_allow_moving_transition();
}
inline bool CustomElement::allow_moving_transition() const {
  return allow_moving_transition_;
}
inline void CustomElement::set_allow_moving_transition(bool value) {
  set_has_allow_moving_transition();
  allow_moving_transition_ = value;
}

// optional uint32 starting_temp = 3;
inline bool CustomElement::has_starting_temp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CustomElement::set_has_starting_temp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CustomElement::clear_has_starting_temp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CustomElement::clear_starting_temp() {
  starting_temp_ = 0u;
  clear_has_starting_temp();
}
inline ::google::protobuf::uint32 CustomElement::starting_temp() const {
  return starting_temp_;
}
inline void CustomElement::set_starting_temp(::google::protobuf::uint32 value) {
  set_has_starting_temp();
  starting_temp_ = value;
}

// optional uint32 lowest_temp = 4;
inline bool CustomElement::has_lowest_temp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CustomElement::set_has_lowest_temp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CustomElement::clear_has_lowest_temp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CustomElement::clear_lowest_temp() {
  lowest_temp_ = 0u;
  clear_has_lowest_temp();
}
inline ::google::protobuf::uint32 CustomElement::lowest_temp() const {
  return lowest_temp_;
}
inline void CustomElement::set_lowest_temp(::google::protobuf::uint32 value) {
  set_has_lowest_temp();
  lowest_temp_ = value;
}

// optional uint32 highest_temp = 5;
inline bool CustomElement::has_highest_temp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CustomElement::set_has_highest_temp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CustomElement::clear_has_highest_temp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CustomElement::clear_highest_temp() {
  highest_temp_ = 0u;
  clear_has_highest_temp();
}
inline ::google::protobuf::uint32 CustomElement::highest_temp() const {
  return highest_temp_;
}
inline void CustomElement::set_highest_temp(::google::protobuf::uint32 value) {
  set_has_highest_temp();
  highest_temp_ = value;
}

// optional uint32 lower_element_index = 6;
inline bool CustomElement::has_lower_element_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CustomElement::set_has_lower_element_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CustomElement::clear_has_lower_element_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CustomElement::clear_lower_element_index() {
  lower_element_index_ = 0u;
  clear_has_lower_element_index();
}
inline ::google::protobuf::uint32 CustomElement::lower_element_index() const {
  return lower_element_index_;
}
inline void CustomElement::set_lower_element_index(::google::protobuf::uint32 value) {
  set_has_lower_element_index();
  lower_element_index_ = value;
}

// optional uint32 higher_element_index = 7;
inline bool CustomElement::has_higher_element_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CustomElement::set_has_higher_element_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CustomElement::clear_has_higher_element_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CustomElement::clear_higher_element_index() {
  higher_element_index_ = 0u;
  clear_has_higher_element_index();
}
inline ::google::protobuf::uint32 CustomElement::higher_element_index() const {
  return higher_element_index_;
}
inline void CustomElement::set_higher_element_index(::google::protobuf::uint32 value) {
  set_has_higher_element_index();
  higher_element_index_ = value;
}

// optional uint32 red = 8;
inline bool CustomElement::has_red() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CustomElement::set_has_red() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CustomElement::clear_has_red() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CustomElement::clear_red() {
  red_ = 0u;
  clear_has_red();
}
inline ::google::protobuf::uint32 CustomElement::red() const {
  return red_;
}
inline void CustomElement::set_red(::google::protobuf::uint32 value) {
  set_has_red();
  red_ = value;
}

// optional uint32 green = 9;
inline bool CustomElement::has_green() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CustomElement::set_has_green() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CustomElement::clear_has_green() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CustomElement::clear_green() {
  green_ = 0u;
  clear_has_green();
}
inline ::google::protobuf::uint32 CustomElement::green() const {
  return green_;
}
inline void CustomElement::set_green(::google::protobuf::uint32 value) {
  set_has_green();
  green_ = value;
}

// optional uint32 blue = 10;
inline bool CustomElement::has_blue() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CustomElement::set_has_blue() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CustomElement::clear_has_blue() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CustomElement::clear_blue() {
  blue_ = 0u;
  clear_has_blue();
}
inline ::google::protobuf::uint32 CustomElement::blue() const {
  return blue_;
}
inline void CustomElement::set_blue(::google::protobuf::uint32 value) {
  set_has_blue();
  blue_ = value;
}

// optional uint32 density = 11;
inline bool CustomElement::has_density() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CustomElement::set_has_density() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CustomElement::clear_has_density() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CustomElement::clear_density() {
  density_ = 0u;
  clear_has_density();
}
inline ::google::protobuf::uint32 CustomElement::density() const {
  return density_;
}
inline void CustomElement::set_density(::google::protobuf::uint32 value) {
  set_has_density();
  density_ = value;
}

// optional sint32 fallvel = 12;
inline bool CustomElement::has_fallvel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CustomElement::set_has_fallvel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CustomElement::clear_has_fallvel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CustomElement::clear_fallvel() {
  fallvel_ = 0;
  clear_has_fallvel();
}
inline ::google::protobuf::int32 CustomElement::fallvel() const {
  return fallvel_;
}
inline void CustomElement::set_fallvel(::google::protobuf::int32 value) {
  set_has_fallvel();
  fallvel_ = value;
}

// optional uint32 inertia = 13;
inline bool CustomElement::has_inertia() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CustomElement::set_has_inertia() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CustomElement::clear_has_inertia() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CustomElement::clear_inertia() {
  inertia_ = 0u;
  clear_has_inertia();
}
inline ::google::protobuf::uint32 CustomElement::inertia() const {
  return inertia_;
}
inline void CustomElement::set_inertia(::google::protobuf::uint32 value) {
  set_has_inertia();
  inertia_ = value;
}

// repeated .Collision collision = 14;
inline int CustomElement::collision_size() const {
  return collision_.size();
}
inline void CustomElement::clear_collision() {
  collision_.Clear();
}
inline const ::Collision& CustomElement::collision(int index) const {
  return collision_.Get(index);
}
inline ::Collision* CustomElement::mutable_collision(int index) {
  return collision_.Mutable(index);
}
inline ::Collision* CustomElement::add_collision() {
  return collision_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Collision >&
CustomElement::collision() const {
  return collision_;
}
inline ::google::protobuf::RepeatedPtrField< ::Collision >*
CustomElement::mutable_collision() {
  return &collision_;
}

// repeated .Special special = 15;
inline int CustomElement::special_size() const {
  return special_.size();
}
inline void CustomElement::clear_special() {
  special_.Clear();
}
inline const ::Special& CustomElement::special(int index) const {
  return special_.Get(index);
}
inline ::Special* CustomElement::mutable_special(int index) {
  return special_.Mutable(index);
}
inline ::Special* CustomElement::add_special() {
  return special_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Special >&
CustomElement::special() const {
  return special_;
}
inline ::google::protobuf::RepeatedPtrField< ::Special >*
CustomElement::mutable_special() {
  return &special_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Particle_Type>() {
  return ::Particle_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
